library(datasets)
data("iris")
?iris
Sepal.Lenght
tapply(iris$Sepal.Length, iris$Species, mean)
iris
iris$Sepal.Length
iris$Species
iris[Species]
iris["Species"]
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 1, mean)
tapply(iris$Sepal.Length, iris$Species, mean, simplify=F)
iris
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
82.63636 - 209.21429
sapply(split(mtcars$hp, mtcars$cyl), mean)["4"]
sapply(split(mtcars$hp, mtcars$cyl), mean)["4"] - sapply(split(mtcars$hp, mtcars$cyl), mean)["8"]
gl(2,5)
gl(3,5)
gl(3:4,5)
gl(4,5)
split(mtcars$hp, 4)
mean(split(mtcars$hp, 4))
sapply(split(mtcars$hp, 4), mean)
debug(ls)
ls
mtcars$hp[cyl=4]
exit
exit()
mean(x)
traceback()
lm(y - x)
traceback
traceback()
lm(y - t)
traceback()
debug(lm)
lm (y-x)
debug(lm)
lm (y-x)
debux(match.call)
debug(match.call)
c
options(error = recover)
n
options(error = recover)
read.csv("asfsdf")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# stores the cached value
# initialize to NULL
cache <- NULL
# create the matrix in the working environment
set <- function(y) {
x <<- y
cache <<- NULL
}
# get the value of the matrix
get <- function() x
# invert the matrix and store in cache
setMatrix <- function(inverse) cache <<- inverse
# get the inverted matrix from cache
getInverse <- function() cache
# return the created functions to the working environment
list(set = set, get = get,
setMatrix = setMatrix,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## attempt to get the inverse of the matrix stored in cache
cache <- x$getInverse()
# return inverted matrix from cache if it exists
# else create the matrix in working environment
if (!is.null(cache)) {
message("getting cached data")
# display matrix in console
return(cache)
}
# create matrix since it does not exist
matrix <- x$get()
cache <- solve(matrix, ...)
return (cache)
}
x = matrix(c(1, 0, 2, -1, 1, 0, 0, 0, 1), 3,3)
x
y <- makeCacheMatrix(x)
y
cacheSolve(y)
cacheSolve(y)
debug(cacheSolve)
debug(cacheSolve)
cacheSolve(y)
cacheSolve(y)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# stores the cached value
# initialize to NULL
cache <- NULL
# create the matrix in the working environment
set <- function(y) {
x <<- y
cache <<- NULL
}
# get the value of the matrix
get <- function() x
# invert the matrix and store in cache
setinverse <- function(inverse) cache <<- inverse
# get the inverted matrix from cache
getinverse <- function() cache
# return the created functions to the working environment
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## attempt to get the inverse of the matrix stored in cache
cache <- x$getinverse()
# return inverted matrix from cache if it exists
# else create the matrix in working environment
if (!is.null(cache)) {
message("getting cached data")
# display matrix in console
return(cache)
}
# create matrix since it does not exist
matrix <- x$get()
cache <- solve(matrix, ...)
x$setinverse(cache)
return (cache)
}
cacheSolve(y)
debug(cacheSolve)
cacheSolve(y)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# stores the cached value
# initialize to NULL
cache <- NULL
# create the matrix in the working environment
set <- function(y) {
x <<- y
cache <<- NULL
}
# get the value of the matrix
get <- function() x
# invert the matrix and store in cache
setinverse <- function(inverse) cache <<- inverse
# get the inverted matrix from cache
getinverse <- function() cache
# return the created functions to the working environment
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## attempt to get the inverse of the matrix stored in cache
cache <- x$getinverse()
# return inverted matrix from cache if it exists
# else create the matrix in working environment
if (!is.null(cache)) {
message("getting cached data")
# display matrix in console
return(cache)
}
# create matrix since it does not exist
matrix <- x$get()
cache <- solve(matrix, ...)
x$setinverse(cache)
return (cache)
}
debug(cacheSolve)
x = matrix(c(1, 0, 2, -1, 1, 0, 0, 0, 1), 3,3)
y <- cacheSolve(x)
y
x
y <- makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(y)
cacheSolve(y)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# stores the cached value
# initialize to NULL
inversecache <- NULL
# create the matrix in the working environment
set <- function(y) {
x <<- y
inversecache <<- NULL
}
# get the value of the matrix
get <- function() x
# invert the matrix and store in inversecache
setinverse <- function(inverse) inversecache <<- inverse
# get the inverted matrix from inversecache
getinverse <- function() inversecache
# return the created functions to the working environment
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## attempt to get the inverse of the matrix stored in cache
inverse <- x$getinverse()
# return inverted matrix from cache if it exists
# else create the matrix in working environment
if (!is.null(inverse)) {
message("getting cached data")
# display matrix in console
return(inverse)
}
# create matrix since it does not exist
matrix <- x$get()
inverse <- solve(matrix, ...)
x$setinverse(inverse)
inverse
}
y <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
y <- makeCacheMatrix(x)
cacheSolve(y)
y <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(y)
## Creates a specia matrix that can store in values
## about its inverse on a cache.
## makeCacheMatrix creates the special matrix.
makeCacheMatrix <- function(x = matrix()) {
# stores the cached value
# initialize inversecache to NULL
inversecache <- NULL
# create the matrix in the working environment
set <- function(y) {
x <<- y
inversecache <<- NULL
}
# get the value of the matrix
get <- function() x
# assign a matrix on inversecache
setinverse <- function(inverse) inversecache <<- inverse
# get the stored matrix on inversecache
getinverse <- function() inversecache
# return the created functions to the working environment
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Gets the inverse of a special matrix created with makeCacheMatrix.
## If the value of the inverse matrix its stored on inversematrix variable
## return that value, otherwise calculates the inverse, store it on
## inversecache and return the inverse.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## try to get the inverse stored in cache
inverse <- x$getinverse()
# return inverted matrix if its stored on chache, otherwise
# create the matrix in working environment
if (!is.null(inverse)) {
message("getting cached data")
# display matrix
return(inverse)
}
# Calculate the matrix, store on cache and return it.
matrix <- x$get()
inverse <- solve(matrix, ...)
x$setinverse(inverse)
return (inverse)
}
y <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(y)
